import React, {
  ComponentType,
  FunctionComponent,
  memo,
  SyntheticEvent,
  useMemo,
} from 'react';
import classNames from 'classnames/bind';
import { ButtonVariant, DarkThemePresets } from '@/_components/button';
import { COMPONENT_STYLE_NAME } from '../../_constants';
import { ClassNameType, TagOptionalPropsType } from '../../_types';
import styles from '../../index.module.scss';
import { ButtonLoader } from '../button-loader';

const cn = classNames.bind(styles);

type ButtonLinkViewPropsType = {
  darkThemePreset?: DarkThemePresets;
  icon?: ComponentType | FunctionComponent;
  isLoading?: boolean;
  needPreloader: boolean;
  onClick: (
    event: SyntheticEvent<HTMLButtonElement | HTMLAnchorElement>,
  ) => void;
  routeName?: string;
  styleButtonLink: ClassNameType;
  styleButtonText: ClassNameType;
  tagName: string;
  tagOptionalProps: TagOptionalPropsType;
  text?: string;
  variant?: ButtonVariant;
  withLoader?: boolean;
};

export const ButtonLinkView = memo(
  ({
    darkThemePreset,
    icon: Icon,
    isLoading = false,
    needPreloader,
    onClick,
    routeName,
    styleButtonLink,
    styleButtonText,
    tagName: Tag,
    tagOptionalProps,
    text,
    variant,
    withLoader,
  }: ButtonLinkViewPropsType) => {
    const isShowLoader = useMemo(
      () => !routeName && withLoader && needPreloader,
      [routeName, withLoader, needPreloader],
    );

    return (
      // eslint-disable-next-line
      // @ts-ignore due to a different set of props the type can't be defined properly 
      <Tag
        className={cn(styleButtonLink)}
        onClick={onClick}
        {...tagOptionalProps} // not a good practice!!!
        // in this case props are generated by util and have a different field set
        // it is impossible to transmit it in any other way
      >
        {!routeName && Icon && (
          <div
            className={cn(`${COMPONENT_STYLE_NAME}-button__icon`, {
              [`${COMPONENT_STYLE_NAME}-button__icon--single`]: Boolean(!text),
            })}
          >
            <Icon />
          </div>
        )}
        {routeName ? text : <span className={cn(styleButtonText)}>{text}</span>}
        {isShowLoader && (
          <ButtonLoader
            darkThemePreset={darkThemePreset}
            isLoading={isLoading}
            variant={variant}
          />
        )}
      </Tag>
    );
  },
);
